
//----------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by a tool.
//		Changes to this file may cause incorrect behaviour and will be lost 
//		if the code is regenerated.
// </autogenerated>
//----------------------------------------------------------------------------------

using System;
using System.Text;
using System.Collections;
using System.ComponentModel;
using System.Globalization;
using Soneta.Types;
using Soneta.Business;
using Soneta.Business.App;
using enova365.TwoFactorAuth;

[assembly: ModuleType("TwoFactor", typeof(enova365.TwoFactorAuth.TwoFactorModule), 4, "TwoFactor", 1, VersionNumber=3)]

namespace enova365.TwoFactorAuth {

	/// <summary>
	/// Moduł TwoFactor.
	/// <seealso cref="Soneta.Business.App"/>
	/// </summary>
	/// <seealso cref="Soneta.Business.Module"/>
	/// <seealso cref="Soneta.Business.Session"/>
	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public partial class TwoFactorModule : Module {

		public static TwoFactorModule GetInstance(ISessionable session) => (TwoFactorModule)session?.Session?.Modules[moduleInfo];

		private static Soneta.Business.App.ModuleInfo moduleInfo = new Soneta.Business.App.ModuleInfo(session => new TwoFactorModule(session)) {
		};

		TwoFactorModule(Session session) : base(session) {}

		private static Soneta.Business.App.TableInfo tableInfoSecrets = new Soneta.Business.App.TableInfo.Create<Secrets, Secret, SecretRecord>("Secret") {
			IsConfig = true,
		};

		public Secrets Secrets => (Secrets)Session.Tables[tableInfoSecrets];

		private static Soneta.Business.App.KeyInfo keyInfoSecretOperator = new Soneta.Business.App.KeyInfo(tableInfoSecrets, table => new SecretTable.OperatorRelation(table)) {
			Name = "Klucz operatora",
			RelationTo = "Operator",
			DeleteCascade = true,
			Guided = RelationGuidedType.Inner,
			Unique = true,
			PrimaryKey = true,
			KeyFields = new[] {"Operator"},
		};

		/// <summary>
		/// Klasa implementująca standardową obsługę tabeli obiektów Secret.
		/// Dziedzicząca klasa <see cref="Secrets"/> zawiera kod użytkownika
		/// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
		/// biblioteki <see cref="Soneta.Business"/>.
		/// </summary>
		/// <seealso cref="Secrets"/>
		/// <seealso cref="SecretRow"/>
		/// <seealso cref="Secret"/>
		/// <seealso cref="Soneta.Business.Table"/>
		public abstract partial class SecretTable : Table {

			protected SecretTable() {}

			public class OperatorRelation : Key<Secret> {
				internal OperatorRelation(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((SecretRecord)rec).Operator
				};

				public Secret this[Operator _operator] => (Secret)Find(_operator);
			}

			public OperatorRelation WgOperator => (OperatorRelation)Session.Keys[keyInfoSecretOperator];


			/// <summary>
			/// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
			/// innych obiektów znajdujących się w tym samym module.
			/// </summary>
			/// <seealso cref="TwoFactorModule"/>
			public new TwoFactorModule Module => (TwoFactorModule)base.Module;

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// ID identyfikującego jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="Secret"/>
			public new Secret this[int id] => (Secret)base[id];

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="Secret"/>
			public new Secret[] this[int[] ids] => (Secret[])base[ids];

			protected override Row CreateRow(RowCreator creator) => new Secret(creator);

			[Soneta.Langs.TranslateIgnore]
			protected override sealed void PrepareNames(StringBuilder names, string divider) {
				names.Append(divider); names.Append("Operator");
				names.Append(divider); names.Append("SharedSecret");
			}

		}

		[Caption("SharedSecrets operatorów")]
		public abstract partial class SecretRow : Row {

			private SecretRecord record;

			protected override void AssignRecord(Record rec) {
				record = (SecretRecord)rec;
			}

			protected SecretRow(RowCreator creator) : base(false) {
			}

			protected SecretRow([Required] Operator _operator) : base(true) {
				if (_operator==null) throw new RequiredException(this, "Operator");
				GetRecord();
				record.Operator = _operator;
			}

			[Required]
			public Operator Operator {
				get {
					if (record==null) GetRecord();
					return (Operator)GetRowReference(ref record.Operator);
				}
			}

			[Description("Klucz operatora do weryfikowania jego tożsamości za pomocą zewnętrznej aplikacji")]
			[Category("Ogólne")]
			[Caption("Sekretny klucz operatora")]
			[MaxLength(255)]
			public string SharedSecret {
				get {
					if (record==null) GetRecord();
					return record.SharedSecret;
				}
				set {
					SecretSchema.SharedSecretBeforeEdit?.Invoke((Secret)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>SharedSecretLength) throw new ValueToLongException(this, "SharedSecret", SharedSecretLength);
					GetEdit(record==null, false);
					record.SharedSecret = value;
					SecretSchema.SharedSecretAfterEdit?.Invoke((Secret)this);
				}
			}

			public const int SharedSecretLength = 255;

			[Browsable(false)]
			public new Secrets Table => (Secrets)base.Table;

			[Browsable(false)]
			public TwoFactorModule Module => Table.Module;

			protected override Soneta.Business.App.TableInfo TableInfo => tableInfoSecrets;

			public sealed override AccessRights GetObjectRight() {
				AccessRights ar = CalcObjectRight();
				SecretSchema.OnCalcObjectRight?.Invoke((Secret)this, ref ar);
				return ar;
			}

			protected sealed override AccessRights GetParentsObjectRight() {
				AccessRights result = CalcParentsObjectRight();
				SecretSchema.OnCalcParentsObjectRight?.Invoke((Secret)this, ref result);
				return result;
			}

			protected override bool CalcReadOnly() {
				bool result = false;
				SecretSchema.OnCalcReadOnly?.Invoke((Secret)this, ref result);
				return result;
			}

			protected override void OnAdded() {
				base.OnAdded();
				System.Diagnostics.Debug.Assert(record.Operator==null || record.Operator.State==RowState.Detached || Session==record.Operator.Session);
				SecretSchema.OnAdded?.Invoke((Secret)this);
			}

			protected override void OnLoaded() {
				base.OnLoaded();
				SecretSchema.OnLoaded?.Invoke((Secret)this);
			}

			protected override void OnEditing() {
				base.OnEditing();
				SecretSchema.OnEditing?.Invoke((Secret)this);
			}

			protected override void OnDeleting() {
				base.OnDeleting();
				SecretSchema.OnDeleting?.Invoke((Secret)this);
			}

			protected override void OnDeleted() {
				base.OnDeleted();
				SecretSchema.OnDeleted?.Invoke((Secret)this);
			}

			protected override void OnRepacked() {
				base.OnRepacked();
				SecretSchema.OnRepacked?.Invoke((Secret)this);
			}

			protected override void LockGuidedRoot() => LockGuidedRoot((Row)Operator);

		}

		public sealed class SecretRecord : Record {
			[Required]
			[ParentTable("Operator")]
			public IRow Operator;
			[MaxLength(255)]
			public string SharedSecret = "";

			public override Record Clone() {
				SecretRecord rec = (SecretRecord)MemberwiseClone();
				return rec;
			}

			public override void Load(RecordReader creator) {
				Operator = creator.Read_Row("Operators");
				SharedSecret = creator.Read_string();
			}
		}

		public static class SecretSchema {

			internal static RowDelegate<SecretRow, string> SharedSecretBeforeEdit;
			public static void AddSharedSecretBeforeEdit(RowDelegate<SecretRow, string> value)
				=> SharedSecretBeforeEdit = (RowDelegate<SecretRow, string>)Delegate.Combine(SharedSecretBeforeEdit, value);

			internal static RowDelegate<SecretRow> SharedSecretAfterEdit;
			public static void AddSharedSecretAfterEdit(RowDelegate<SecretRow> value)
				=> SharedSecretAfterEdit = (RowDelegate<SecretRow>)Delegate.Combine(SharedSecretAfterEdit, value);

			internal static RowDelegate<SecretRow> OnLoaded;
			public static void AddOnLoaded(RowDelegate<SecretRow> value)
				=> OnLoaded = (RowDelegate<SecretRow>)Delegate.Combine(OnLoaded, value);

			internal static RowDelegate<SecretRow> OnAdded;
			public static void AddOnAdded(RowDelegate<SecretRow> value)
				=> OnAdded = (RowDelegate<SecretRow>)Delegate.Combine(OnAdded, value);

			internal static RowDelegate<SecretRow> OnEditing;
			public static void AddOnEditing(RowDelegate<SecretRow> value)
				=> OnEditing = (RowDelegate<SecretRow>)Delegate.Combine(OnEditing, value);

			internal static RowDelegate<SecretRow> OnDeleting;
			public static void AddOnDeleting(RowDelegate<SecretRow> value)
				=> OnDeleting = (RowDelegate<SecretRow>)Delegate.Combine(OnDeleting, value);

			internal static RowDelegate<SecretRow> OnDeleted;
			public static void AddOnDeleted(RowDelegate<SecretRow> value)
				=> OnDeleted = (RowDelegate<SecretRow>)Delegate.Combine(OnDeleted, value);

			internal static RowDelegate<SecretRow> OnRepacked;
			public static void AddOnRepacked(RowDelegate<SecretRow> value)
				=> OnRepacked = (RowDelegate<SecretRow>)Delegate.Combine(OnRepacked, value);

			internal static RowAccessRightsDelegate<SecretRow> OnCalcObjectRight;
			public static void AddOnCalcObjectRight(RowAccessRightsDelegate<SecretRow> value)
				=> OnCalcObjectRight = (RowAccessRightsDelegate<SecretRow>)Delegate.Combine(OnCalcObjectRight, value);

			internal static RowAccessRightsDelegate<SecretRow> OnCalcParentsObjectRight;
			public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<SecretRow> value)
				=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<SecretRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

			internal static RowReadOnlyDelegate<SecretRow> OnCalcReadOnly;
			public static void AddOnCalcReadOnly(RowReadOnlyDelegate<SecretRow> value)
				=> OnCalcReadOnly = (RowReadOnlyDelegate<SecretRow>)Delegate.Combine(OnCalcReadOnly, value);

		}

	}

	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public static class StaticsTwoFactorModule {
		public static TwoFactorModule GetTwoFactor(this Session session) => TwoFactorModule.GetInstance(session);
	}

}

